<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAVU4xAFVOMR1VTjF6VU4xD1VOMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVTjEAVU4xNFVOMdxVTjEbVU4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVOMQBVTjE0VU4x21VOMRtVTjEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAFVOMTRVTjHbVU4xG1VOMQBVTjEAVU4xAFVO
        MQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVO
        MQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAAAAAABVTjEAVU4xNFVOMdtVTjEgVU4xaVFK
        LIZPSCqET0gqhE9IKoRPSCqET0gqhE9IKoRPSCqET0gqhE9IKoRPSCqET0gqhE9IKoRPSCqET0gqhE9I
        KoRPSCqET0gqhE9IKoRPSCqET0gqhE9IKoRPSCqET0gqhFFJK4RVTjGEAAAAAFVOMQBVTjE0VU4x2lVO
        MSRVTjHQcGpS/313Yv98d2H/fHdh/3x3Yf98d2L/fHdi/3x3Yf98d2H/fHdi/3x3Yf98d2H/fHdh/3x3
        Yf98d2H/fHdh/3x3Yf98d2H/fHdh/3x3Yv98d2L/fHdh/3x3Yf98d2L/dG9Y/1dQM/8AAAAAVU4xAFVO
        MTNVTjHdVU4xNVVOMc+7ua//7Ozt/+np6f/p6en/6enp/+Li4P/i4uD/6enp/+bm5f/g393/5+fm/+np
        6f/p6en/6enp/+np6f/p6en/6enp/+np6f/p6en/5eTj/+Dg3v/o6Of/6enp/+vr7P/LysT/W1Q5/wAA
        AABVTjEAVU4xMlVOMfJUTTDlVE0w+by6sf/t7e7/6urq/+vr6//c29j/gn1p/4J9af/c3Nn/q6ic/3Bq
        Uv+4tqz/7Ozs/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+jo6P+cmIn/c21W/8fFvv/s7Oz/7Ozt/8zL
        xf9bVDn/AAAAAFVOMQBSSy0yYFk+9q2qnv+5tq3/29rX/+vr6//q6ur/7Ozs/9DPyv9fWD3/X1g9/9HQ
        y/+Mh3X/T0gq/52Ziv/s7O3/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/5uXk/3l0Xv9SSi3/sK2i/+3t
        7f/s7O3/zMvF/1tUOf8AAAAAVU4xAFBJKzJmX0b23d3a/+7v7//r6+v/6urq/+rq6v/r6+v/4+Ph/6qn
        mv+qp5r/5OPi/8bEvf+bl4j/z83I/+vr6//q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/p6en/vLqx/56a
        i//X1tP/6+vr/+zs7f/My8X/W1Q5/wAAAABVTjEAUEkrMmVfRfba2db/6+vr/+rq6v/q6ur/6urq/+rq
        6v/q6ur/7Ozs/+zs7P/q6ur/6+vr/+zs7f/r6+v/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq
        6v/r6+z/7Ozs/+vr6//q6ur/7Ozt/8zLxf9bVDn/AAAAAFVOMQBQSSsyZV9F9trZ1v/r6+v/6urq/+rq
        6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/p6en/5ubl/+bm5f/m5uX/5ubl/+bm
        5f/m5uX/5ubl/+bm5f/n5+b/6urq/+rq6v/s7O3/zMvF/1tUOf8AAAAAVU4xAFBJKzJlX0X22tnW/+vr
        6//q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/7u7u/8jGwP9zbVb/c2xW/3Ns
        Vv9zbFb/c2xW/3NsVv9zbFb/cWpU/4uHdP/o6Of/6urq/+zs7f/My8X/W1Q5/wAAAABVTjEAUEkrMmVf
        Rfba2db/6+vr/+zs7P/t7e7/7e3u/+3t7v/t7e7/7e3u/+3t7f/q6uv/6urq/+zs7P/Gxb7/f3lk/1VZ
        M/9cj0b/XJJH/1ySR/9ckkf/XJJH/1yTSP9Yez//X1g9/5uXiP/h4d//7e3t/8zLxf9bVDn/VU4xAFVO
        MQBQSSsxZV9F9trZ1v/r6+v/09LN/767sv+9u7L/vbuy/727sv+9urH/xsS9/+Tk4//q6ur/7Ozt/727
        sv9xalP/WGc6/2bKXf9mz1//Zs9f/2bPX/9mz1//Z9Fg/2CnUP9dVjv/ioVy/9/e3P/t7e3/zMvF/1tU
        Of9VTjEMVU4xFlFKLUZlX0X329vY/9fW0v94c13/U1M8/1NXQv9TV0L/U1dC/1JWQP9eWkH/sKyh/+vr
        6//s7Oz/wb+3/3dwW/9YZzr/Zcdc/2bMXv9mzF7/Zsxe/2bMXv9mz1//YKVP/19YPf+RjXz/4N/d/+3t
        7f/My8X/W1Q5/1VOMW9VTjHoVE0v62VfRf7d3dr/v7yz/1NYRP9Flbb/QqXW/0Kl1P9CpdX/QqLQ/0pt
        bv+Efmn/6urq/+zs7P/Bv7f/d3Bb/1hnOv9lx1z/Zsxe/2bMXv9mzF7/Zsxe/2bPX/9gpU//X1g9/5GN
        fP/g393/7e3t/8zLxf9bVDn/Vkwre1FaW/9KbJz/ZGBJ/93c2v/AvbT/VFhD/0aPrf9DoMz/Q6DL/0Og
        y/9Encb/S2po/4V/a//q6ur/7Ozt/727sv9xalP/WGc6/2XHXP9mzF7/Zsxe/2bMXv9mzF7/Zs9f/2Cl
        UP9dVjv/ioVy/9/e3P/t7e3/zMvF/1tUOf9WSyh7UGBv/0Z6zv9kYUz/29vY/9nZ1f9+eWT/VlM5/1ZW
        Pv9WVj7/VlY+/1ZVPP9iXUT/tbKo/+vr6//s7Oz/xcO8/353Y/9YZzr/Zcdc/2bMXv9mzF7/Zsxe/2bM
        Xv9mz1//YKVP/2BaP/+ZlYX/4eDf/+3t7f/My8X/W1Q5/1ZLKHtQX23/RnnL/2RgTP/a2db/6+vr/9rZ
        1v/KyML/ysjC/8rIwv/KyML/ysjC/9DPyv/m5uX/6urq/+zs7f+5t67/a2NM/1hnOv9myl3/Zs9f/2bO
        X/9mzl//Zs5f/2fRYP9hp1D/W1Q4/4J+af/e3dv/7e3u/8zLxf9bVDn/Vksoe1Bfbf9Gecv/ZGBM/9ra
        1v/p6en/wb+2/6Cbi/+gmor/oJqK/6Caiv+fmYn/rKic/93d2v/r6+v/7Ozs/8zKxP+HgW//VFcy/1qF
        Qv9aiEP/WohD/1qIQ/9aiEP/WolD/1d0O/9hWkD/paGU/+Li4P/t7e3/zMvF/1tUOf9WSyh7UF9u/0Z6
        zf9kYUz/3NvZ/8/NyP9pZE3/TVxO/0xkXf9MZF3/TGRd/0xiWf9VVj//oJyN/+vr6//q6ur/7u7u/8vK
        xP99d2L/fHVh/3x1Yf98dWH/fHVh/3x1Yf98dWH/e3Rg/5OPfv/p6ej/6urr/+zs7f/My8X/W1Q5/1VN
        LX5TVUn/T19u/2RfR//d3dr/vbqw/1FZR/9Dn8r/QK/o/0Cv5/9Ar+f/QK3k/0h0e/+Be2X/6urq/+rq
        6v/q6ur/6urq/+np6f/p6en/6enp/+np6f/p6en/6enp/+np6f/p6en/6enp/+rq6v/q6ur/7Ozt/8zL
        xf9bVDn/VU4xUlVNL6pUSyq6ZV9F/N3c2v/Dwbn/WFlC/0l9i/9Gjaj/Royn/0aMp/9GiaL/TWBW/4uG
        c//q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq
        6v/s7O3/zMvF/1tUOf9VTjEAVU4xAFBJKzBlX0X229rX/+Hg3v+Tj37/Z2BG/2dgRv9nYEb/Z2BG/2Zf
        Rf92cFn/xcO8/+vr6//q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq
        6v/q6ur/6urq/+zs7f/My8X/W1Q5/wAAAABVTjEAUEkrMmZfRvbc29j/7e3u/+fn5v/h4N7/4eDe/+Hg
        3v/h4N7/4eDe/+Pj4v/r6+z/7Ozs/+zs7P/s7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+zs
        7P/s7Oz/7Ozs/+zs7P/s7Oz/7u7v/87Mx/9bVDn/AAAAAFVOMQBRSiwyYlxC9sPBuf/R0Mv/0M/K/9DP
        yv/Qz8r/0M/K/9DPyv/Qz8r/0M/K/9DPyv/Qz8r/0M/K/9DPyv/Qz8r/0M/K/9DPyv/Qz8r/0M/K/9DP
        yv/Qz8r/0M/K/9DPyv/Qz8r/0M/K/9DPyv/S0cz/t7Wr/1pTN/8AAAAAVU4xAFVOMTJWTzL1WlQ4+VtU
        OfhbVDj5W1Q4+VtUOPlbVDj5W1Q4+VtUOPlbVDj5W1Q4+VtUOPlbVDj5W1Q4+VtUOPlbVDj5W1Q4+VtU
        OPlbVDj5W1Q4+VtUOPlbVDj5W1Q4+VtUOPlbVDj5W1Q4+VtUOflaUzf5VU4x+VVOMQBVTjEAVU4xM1VO
        MeBVTjFKVE0wM1RNMDRUTTA0VE0wNFRNMDRUTTA0VE0wNFRNMDRUTTA0VE0wNFRNMDRUTTA0VE0wNFRN
        MDRUTTA0VE0wNFRNMDRUTTA0VE0wNFRNMDRUTTA0VE0wNFRNMDRUTTA0VE0wNFVOMDRVTjE0VU4xDlVO
        MQtVTjE/VU4x21VOMRhVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVO
        MQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVOMQBVTjEAVU4xAFVO
        MQBVTjHbVU4x21VOMeRVTjHkVU4xG1VOMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFVOMWtVTjFrVU4xa1VOMV5VTjELVU4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAg////4P///+D////gAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AACAAAAAgAAAAAAAAAAAAAAAA////wP///8=
</value>
  </data>
</root>