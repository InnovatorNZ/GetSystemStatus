<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAA
        ACwAAAAtAAAALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAA
        AC0AAAAtAAAALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAAAC0AAAAtAAAALQAAACwAAAARAAAAAAAA
        AAAAAAB6AAAA7QAAAOoAAADpAAAA6QAAAOoAAADpAAAA6gAAAOoAAADpAAAA6gAAAOkAAADpAAAA6gAA
        AOkAAADpAAAA6gAAAOkAAADpAAAA6gAAAOkAAADqAAAA6gAAAOkAAADqAAAA6QAAAOkAAADqAAAA7gAA
        AIYAAAAAAAAAAAAAAJgAAADfAAAAZgAAAMgAAACuAAAAaAAAAN0AAACOAAAAfAAAAOMAAAB0AAAAmAAA
        ANgAAABlAAAAuAAAAMAAAABjAAAA0gAAAKEAAABvAAAA4QAAAIMAAACGAAAA4AAAAG0AAAClAAAAzwAA
        AGUAAADXAAAApgAAAAEAAAAAAAAAlwAAAMcAAAARAAAAxAAAAJkAAAAdAAAA5AAAAGEAAABBAAAA7gAA
        ADQAAAByAAAA3AAAABYAAACpAAAAtwAAABIAAADTAAAAggAAACkAAADsAAAATgAAAFMAAADpAAAAJQAA
        AIoAAADPAAAAEQAAALsAAAClAAAAAAAAAA0AAACgAAAAzQAAACcAAAC+AAAAmAAAAC4AAADbAAAAaAAA
        AEwAAADkAAAAQQAAAHcAAADUAAAAKQAAAKYAAACyAAAAJQAAAMwAAACEAAAAOAAAAOIAAABYAAAAXAAA
        AOAAAAA1AAAAiwAAAMgAAAAnAAAAwgAAAK0AAAAQAAAAwgAAAPEAAAD6AAAA2wAAAPAAAADqAAAA2gAA
        APUAAADjAAAA3gAAAPYAAADdAAAA5QAAAPQAAADaAAAA7AAAAO4AAADZAAAA8gAAAOcAAADcAAAA9gAA
        AOAAAADhAAAA9gAAANsAAADoAAAA8gAAANoAAAD4AAAA8wAAAMgAAAD/AAAAuwAAAH8AAACBAAAAfwAA
        AIAAAACBAAAAfwAAAIMAAACDAAAAfwAAAIAAAACAAAAAfwAAAIEAAACCAAAAggAAAIEAAAB/AAAAgAAA
        AIAAAAB/AAAAgwAAAIMAAAB/AAAAgAAAAIAAAAB/AAAAgQAAAH8AAAC0AAAA/wAAAP8AAABxAAAAAAAA
        ACcAAAAxAAAAMAAAADEAAAAsAAAABwAAAAIAAAAoAAAAMQAAADAAAAAxAAAAKwAAAAUAAAADAAAAKgAA
        ADEAAAAwAAAAMQAAACoAAAAEAAAABQAAACsAAAAxAAAAMAAAADEAAAApAAAAAAAAAGMAAAD/AAAA/wAA
        AHAAAAAuAAAA4AAAAO8AAADtAAAA7gAAAO0AAABSAAAANwAAAOQAAADuAAAA7QAAAO4AAADrAAAASgAA
        AD4AAADnAAAA7gAAAO0AAADuAAAA6AAAAEIAAABGAAAA6QAAAO4AAADtAAAA7gAAAOUAAAA5AAAAYgAA
        AP8AAAD/AAAAcAAAAD0AAADyAAAAggAAAFAAAABrAAAA7wAAAGYAAABGAAAA9AAAAH0AAABQAAAAcAAA
        APEAAABeAAAAUAAAAPMAAAB3AAAAUAAAAHYAAAD0AAAAVAAAAFgAAADyAAAAcgAAAFAAAAB6AAAA8wAA
        AEkAAABhAAAA/wAAAP8AAABwAAAAPAAAAO4AAABCAAAAAAAAAB8AAADlAAAAZgAAAEYAAADvAAAAOgAA
        AAAAAAAmAAAA6QAAAF0AAABPAAAA7QAAADAAAAAAAAAALwAAAO0AAABTAAAAVwAAAOoAAAApAAAAAAAA
        ADYAAADuAAAASAAAAGEAAAD/AAAA/wAAAHAAAAA8AAAA7gAAAEUAAAAAAAAAIwAAAOUAAABlAAAARgAA
        AO8AAAA+AAAAAAAAACkAAADpAAAAXQAAAE8AAADtAAAANAAAAAAAAAAyAAAA7QAAAFMAAABXAAAA6gAA
        AC0AAAAAAAAAOQAAAO4AAABIAAAAYQAAAP8AAAD/AAAAcAAAADwAAADuAAAARQAAAAAAAAAjAAAA5QAA
        AGUAAABGAAAA7wAAAD4AAAAAAAAAKQAAAOkAAABdAAAATwAAAO0AAAA0AAAAAAAAADIAAADtAAAAUwAA
        AFcAAADqAAAALQAAAAAAAAA5AAAA7gAAAEgAAABhAAAA/wAAAP8AAABwAAAAPAAAAO4AAABCAAAAAAAA
        ACAAAADlAAAAZgAAAEYAAADvAAAAOwAAAAAAAAAmAAAA6QAAAF0AAABPAAAA7QAAADEAAAAAAAAALwAA
        AO0AAABTAAAAVwAAAOoAAAAqAAAAAAAAADYAAADuAAAASAAAAGEAAAD/AAAA/wAAAHAAAAA9AAAA8QAA
        AHIAAAA5AAAAWAAAAOwAAABmAAAARgAAAPIAAABsAAAAOQAAAF0AAADvAAAAXgAAAFAAAADxAAAAZQAA
        ADkAAABkAAAA8gAAAFMAAABXAAAA8AAAAGAAAAA5AAAAaQAAAPEAAABJAAAAYQAAAP8AAAD/AAAAcAAA
        ADMAAADqAAAA8wAAAO8AAADxAAAA9gAAAFgAAAA7AAAA7gAAAPIAAADvAAAA8QAAAPQAAABQAAAAQwAA
        APEAAADyAAAA7wAAAPIAAADyAAAARwAAAEsAAADzAAAA8QAAAO8AAADyAAAA7wAAAD4AAABiAAAA/wAA
        AP8AAABwAAAAAAAAADkAAABGAAAARgAAAEYAAABAAAAACwAAAAUAAAA7AAAARgAAAEYAAABGAAAAPwAA
        AAkAAAAGAAAAPAAAAEYAAABGAAAARgAAAD0AAAAHAAAACAAAAD4AAABGAAAARgAAAEYAAAA8AAAAAgAA
        AGIAAAD/AAAA/wAAAK4AAABnAAAAZgAAAGUAAABlAAAAZQAAAGYAAABpAAAAaQAAAGYAAABlAAAAZQAA
        AGUAAABmAAAAaQAAAGkAAABmAAAAZQAAAGUAAABlAAAAZgAAAGkAAABpAAAAZgAAAGUAAABlAAAAZQAA
        AGYAAABmAAAApgAAAP8AAADUAAAA5QAAAOUAAADlAAAA5QAAAOUAAADlAAAA5QAAAOUAAADlAAAA5QAA
        AOUAAADlAAAA5QAAAOUAAADlAAAA5QAAAOUAAADlAAAA5QAAAOUAAADlAAAA5QAAAOUAAADlAAAA5QAA
        AOUAAADlAAAA5QAAAOUAAADlAAAA2QAAABkAAAAjAAAAIwAAACMAAAAjAAAAIwAAACMAAAAjAAAAIwAA
        ACMAAAAjAAAAIwAAACMAAAAjAAAAIwAAACMAAAAjAAAAIwAAACMAAAAjAAAAIwAAACMAAAAjAAAAIwAA
        ACMAAAAjAAAAIwAAACMAAAAjAAAAIwAAACMAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA//////////////////////////8=
</value>
  </data>
</root>