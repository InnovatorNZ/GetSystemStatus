<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVE8yAFRPMz1UTjLyVE4x7lROMehUTjHrVE4x7VROMe1UTjHtVE4x7VROMe1UTjHtVE4x7VRO
        Me1UTjHtVE4x7VROMe1UTjHtVE4x7VROMe1UTjHtVE4x7VROMe1UTjHtVE4x61ROMehUTjHuVE4y8lRP
        Mz1UTzIAAAAAAAAAAABUTzIAU04yP1VPMtRcVztZW1Y6flxYO1RVUDMzVVAyNFVQMjRVUDI0VVAyNFVQ
        MjRVUDI0VVAyNFVQMjRVUDI0VVAyNFVQMjRVUDI0VVAyNFVQMjRVUDI0VVAyNFVQMzNcWDtUW1Y6flxX
        O1lVTzLUU04yP1RPMgAAAAAAAAAAAFRPMgBTTzJAVU8yyVxXPIFWUDP9XFY7nQAAAABYUzUAVVAyAFVQ
        MgBVUDIAVVAyAFVQMgBVUDIAVVAyAFVQMgBVUDIAVVAyAFVQMgBVUDIAVVAyAFVQMgBYUzUAAAAAAFxW
        O51WUDP9XFc8gVVPMslTTzJAVE8yAAAAAAAAAAAAVE8yAFNPMkBVTzLKXlk/YllTN89eWT90OjERAFhT
        OABeWT4AbmpRAGVfRgCeo5UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIaD
        bgD///8AXlk/dFlTN89eWT9iVU8yylNPMkBUTzIAAAAAAAAAAABUTzIAU08yQFVPMs1dWD0Zb2tVD5iY
        igVlX0UqXVc4VmJdP0N1cVkLamVMAGBcQgC8vrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgHxmAHVxWwCFg3EFcGtVEF1YPRlVTzLNU08yQFRPMgAAAAAAAAAAAFRPMgBTTzJAVU8yzVlU
        NxdOSCoAY15EWlhTP+NXU1T+V1NK9ltWOZ91cVwUaWRMAGBbQgC9v7kAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAendhAH57ZgBiXUQAWVQ4F1VPMs1TTzJAVE8yAAAAAAAAAAAAVE8yAFNP
        MkBVTzLNWFM2Fm1nTxZZVD3TWFRY/1dUXf9ZWpf/V1Rd/15ZO6V7d2ITa2ZPAGBbQQDAwrwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFlVOQBZVDgXVU8yzVNPMkBUTzIAAAAAAAAA
        AABUTzIAU08yQFVPMs1XUzUUZmFFLVhTRe5XVWD/VE4u/1lZlv9aXsv/V1Rb/19ZPKV9emUUbGhQAF9a
        QQDAwb0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWVU5AFlUOBdVTzLNU08yQFRP
        MgAAAAAAAAAAAFRPMgBTTzJAVU8yzVhTNhZuaVAVWVQ80FhXeP9ZWp7/WV7Y/1lf6v9ZXcj/V1Ra/19Z
        PKV8d2MTa2ZOAG9pUgB4dF8AkI53AIF/ZADExMQAAAAAAAAAAAAAAAAAAAAAAAAAAABZVTkAWVQ4F1VP
        Ms1TTzJAVE8yAAAAAAAAAAAAVE8yAFNPMkBVTzLNWVQ4F0xEJABgW0BSWFM+3ldVaf9ZW6//WV/f/1lf
        6/9ZXcj/V1Ra/15YO6N2cVshbGdQEnh0YAoAAAAAWFM3AG5nUgAAAAAAsauiAAAAAAAAAAAAAAAAAFlV
        OQBZVDgXVU8yzVNPMkBUTzIAAAAAAAAAAABUTzIAU08yQFVPMs1ZVDgXXlo/AAAAAABkX0MnXFY3hldS
        POBXVWj+WVux/1lf4v9ZXcr/V1Ra/VlTNd1aVDfQWlQ4v1lTOZRgWkJQcWtXEFBKLQCAe2kAdnFdAAAA
        AAAAAAAAWVU5AFlUOBdVTzLNU08yQFRPMgAAAAAAAAAAAFRPMgBTTzJAVU8yzVlUOBdZVTgAjYl7AGBc
        QgAgFwAAZ2JHK1lTNb9UTzj/VlRp/1hbtf9aXcL/VVJa/2hjPP+UkVb/g39N/2dhPfhZUzi/Y15GTcrK
        xwJoZUwAXlo/AAAAAABZVTkAWVQ4F1VPMs1TTzJAVE8yAAAAAAAAAAAAVE8yAFNPMkBVTzLNWVQ4F1lV
        OQB/emcAbmpTAHV0XQZbVjx2YVs67Y6KUf+NiU//ZF9C/1ZUbv9YWZb/WVVV/4iDTv/Ew3D/u7pr/42J
        Uv9gWzrxXVk/eHx8ZAZtaVEAe3diAFlVOQBZVDgXVU8yzVNPMkBUTzIAAAAAAAAAAABUTzIAU08yQFVP
        Ms1ZVDgXWVU5AIaCcADNysgCW1Y9d2VgPPmnpWD/y8pz/8vKdP+4tmn/i4hO/2NeRf9WUU//VU81/4aB
        Tf/FxHD/y8p0/6ajYP9kXzv4XVg+duTg4wKCfmsAWVU5AFlUOBdVTzLNU08yQFRPMgAAAAAAAAAAAFRP
        MgBTTzJAVU8yzVlUOBdaVTkAWFE1AGReRkpgWzvxp6Rg/8zLdP/KyXP/yslz/8vKdP/KyXP/t7Vo/4qG
        T/9hWzn/VE0x/4WATf/EwnD/zMt0/6WjX/9fWjrvYl1FSFdRNgBZVTkAWVQ4F1VPMs1TTzJAVE8yAAAA
        AAAAAAAAVE8yAFNPMkBVTzLNWVQ4F2JeRAB2cl4OWVM4u4yJUf/KyXP/yslz/8rJc//KyXP/yslz/8zL
        dP/LynT/yshz/7e1af+JhU//YVs5/5iUWP/LynT/yslz/4uHUf9YUje4bWhTDF9bQQBZVDgXVU8yzVNP
        MkBUTzIAAAAAAAAAAABUTzIAU08yQFVPMs1ZVDgXW1U6AF9aQUhmYD32ubhq/8vKdP/KyXP/yslz/8vK
        c//DwnD/nJhY/395SP9/eUj/nppZ/8PCcP+2tGn/uLZq/8rJc//LynT/ubdq/2VgPfVfWkJGW1Y7AFlU
        OBdVTzLNU08yQFRPMgAAAAAAAAAAAFRPMgBTTzJAVU8yzVlUOBc9NxUAWFI4iX97Sv/JyHP/yslz/8rJ
        c//KyXP/xMNw/4F9Sv9SYVP/SX2K/0l9iv9SYVP/gX1L/8XEcf/LynT/yslz/8rJc//JyHP/f3tK/1hS
        OYdAOhoAWVQ4F1VPMs1TTzJAVE8yAAAAAAAAAAAAVE8yAFNPMkBVTzLNWVQ3F4uKfARXUjezlpNX/8zL
        dP/KyXP/yslz/8zLdP+gnFv/U2FR/0Sex/9Ar+b/QK/m/0Sex/9TYVH/oJxb/8zLdP/KyXP/yslz/8zL
        dP+Vklf/WFI3spOShARZVDcXVU8yzVNPMkBUTzIAAAAAAAAAAABUTzIAU08yQFVPMs1YUzcXcW1YCllT
        N8Whnlz/zMt0/8rJc//KyXP/y8pz/4V/Sv9KeIL/QK7m/0Ct4/9AreP/QK7m/0p4gv+Ff0r/y8pz/8rJ
        c//KyXP/zMt0/6CdXP9ZUzfFcm5aClhTNxdVTzLNU08yQFRPMgAAAAAAAAAAAFRPMgBTTzJAVU8yzVhT
        NxdzcV0KWVM3w6CdXP/My3T/yslz/8rJc//LynT/h4FL/0t2ff9AruX/QK3j/0Ct4/9AruX/S3Z9/4eB
        S//LynT/yslz/8rJc//My3T/oJ1c/1lTN8NzcF0KWFM3F1VPMs1TTzJAVE8yAAAAAAAAAAAAVE8yAFNP
        MkBVTzLNWVQ3F6qsogJXUjeuk49V/8zLdP/KyXP/yslz/8zLdP+lol7/Vl9L/0WXuv9AruT/QK7k/0WX
        uv9WX0v/paJe/8zLdP/KyXP/yslz/8zLdP+Tj1X/V1I3rqqsoQJZVDcXVU8yzVNPMkBUTzIAAAAAAAAA
        AABUTzIAU08yQFVPMs1ZVDgXR0AhAFhTOoB7d0j/yMdy/8rJc//KyXP/yslz/8fGcv+MiFH/V19J/0xy
        df9McnX/V19J/4yIUf/HxnL/yslz/8rJc//KyXP/yMdy/3t3SP9YUzqAR0AhAFlUOBdVTzLNU08yQFRP
        MgAAAAAAAAAAAFRPMgBTTzJAVU8yzVlUOBdcWDwAYFpCPGNdO/G0smj/y8p0/8rJc//KyXP/yslz/8fG
        cv+ppmD/johP/46IT/+ppmD/x8Zy/8rJc//KyXP/yslz/8vKdP+0smj/Y1078WBaQjxcWDwAWVQ4F1VP
        Ms1TTzJAVE8yAAAAAAAAAAAAVE8yAFNPMkBVTzLNWVQ4F2JeQwCAfWgIWVQ5rIR/TP/Ix3L/yslz/8rJ
        c//KyXP/yslz/8zLdP/LynT/y8p0/8zLdP/KyXP/yslz/8rJc//KyXP/yMdy/4R/TP9ZVDmsgH1oCGJe
        QwBZVDgXVU8yzVNPMkBUTzIAAAAAAAAAAABUTzIAU08yQFVPMs1ZVDgXWVU4AF1YPABkX0Y4XVc55ZyY
        Wv/LynT/yslz/8rJc//KyXP/yslz/8rJc//KyXP/yslz/8rJc//KyXP/yslz/8vKdP+cmFr/XVc55WRf
        RjhdWDwAWVU4AFlUOBdVTzLNU08yQFRPMgAAAAAAAAAAAFRPMgBTTzJAVU8yzVlUOBdiXUQAg4FtAAAA
        AABhW0NhYFo68ZuYWf/Ix3L/zMt0/8rJc//KyXP/yslz/8rJc//KyXP/yslz/8zLdP/Ix3L/m5hZ/2Ba
        OvFhW0NhAAAAAIOBbQBiXUQAWVQ4F1VPMs1TTzJAVE8yAAAAAAAAAAAAVE8yAFNPMkBVTzLNXVg9GXBr
        VRCFg3EFdHBaANvh3AFgWkJfXVc544F9S/+xr2b/x8Zy/8vLdP/My3T/zMt0/8vLdP/HxnL/sa9m/4F9
        S/9dVznjYFpCX9vh3AF0cFoAhYNxBXBrVRBdWD0ZVU8yzVNPMkBUTzIAAAAAAAAAAABUTzIAU08yQFVP
        MspeWT9iWVM3z15ZP3T///8AeXVhAAAAAABkX0c0WVM5pWFbO+13ckb/jYpS/5mWWP+Zllj/jYpS/3dy
        Rv9hWzvtWVM5pWRfRzQAAAAAeXVhAP///wBeWT90WVM3z15ZP2JVTzLKU08yQFRPMgAAAAAAAAAAAFRP
        MgBTTzJAVU8yyVxXPIFWUDP9XFY7nQAAAABYUjUAWFM2AFdSNQDHwsEDZF9IM1pUO3FYUjifV1E2sldR
        NrJYUjifWlQ7cWRfSDPHwsEDV1I1AFhTNgBYUjUAAAAAAFxWO51WUDP9XFc8gVVPMslTTzJAVE8yAAAA
        AAAAAAAAVE8yAFNOMj9VTzLUXFc7WVtWOn5cWDtUVVAzM1VQMjRVUDI0VVAyNFVQMjNUTzEwVlEzMFlU
        NzVYUzY5WFM2OVlUNzVWUTMwVE8xMFVQMjNVUDI0VVAyNFVQMjRVUDMzXFg7VFtWOn5cVztZVU8y1FNO
        Mj9UTzIAAAAAAAAAAABUTzIAVE8zPVROMvJUTjHuVE4x6FROMetUTjHtVE4x7VROMe1UTjHtVE4x7VRO
        Me1UTjHtVE4x7VROMexUTjHsVE4x7VROMe1UTjHtVE4x7VROMe1UTjHtVE4x7VROMe1UTjHrVE4x6FRO
        Me5UTjLyVE8zPVRPMgAAAAAAgAAAAYAAAAGAAAABgAf+AYAD/gGAAf8BgAD/wYAAf8GAAAfBgAABwYAA
        AMGAAABBgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAE=
</value>
  </data>
</root>