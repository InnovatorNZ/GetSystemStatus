<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKurqwCFT0AAiFRGAH1BLgCqhH4Df0QyKXw+LGx7PSqtejso13k6
        Juh5Oibpejom6W8xIuhQFxXWShITqk0VFmtQFxgob0JGAkoTFABSHR8AUBocAHp6egAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACOVEcAdDIdAH1BLwCkhX8Bf0QyOHw/LJp6PCjgeTom+3k6
        Jv95Oib/eTom/3o7Jv9yNCP/VRsX/0oREv9KERL/ShES+0sSE99MFBWXTBUWNWpAQgFNFhgAQQoLAGcu
        MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjFVFAKBtZwB5OycAfUAvGHs9Kod6PCjreTom/3k6
        Jv95Oib/eTom/3k6Jv96Oib/czQj/1YbF/9JERL/ShES/0oREv9KERL/ShES/0oREv9KEhPpSxMVh08Y
        GhhIERIAaUBFAFcnKQAAAAAAAAAAAAAAAAAAAAAAAAAAAIVMOwCLWEkAcjAbAHxALTN6OyjBeTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3M1JP9WHBf/SRES/0oREv9KERL/ShES/0oREv9KERL/ShES/0oR
        Ev9KERL/SxMUwU0XFzRIDQ0AYjM2AGAwMgAAAAAAAAAAAAAAAACPV0oAm2dhAHc4IwB9QC5Aejwo2Xk6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3o6Jv90NST/Vx0Y/0oREv9KERL/ShES/0oREv9KERL/ShES/0oR
        Ev9KERL/ShES/0oREv9KERL/ShIT2U4XGkBCBwcAdUxRAG44OgAAAAAAu7u7AHU1IQB6PCgAfEAuNHo7
        KNl5Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/dDYk/1gdGP9KERL/ShES/0oREv9KERL/ShES/0oR
        Ev9KERL/ShES/0oREv9KERL/ShES/0oREv9KERL/SxMU2lAZGjZJERMAPwcJAKCgoAB8RDUAfEAvAH9E
        Mhl6PCjCeTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3U1I/9ZHhj/ShES/0oQEf9KERL/ShES/0oQ
        Ef9KERL/ShES/0oQEf9KERL/ShES/0oREv9KERL/ShES/0oREv9KERL/TBMUw1EbHBlPGRoAVB8gAIBK
        OwCSdXQBez0qiXk6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv92OSf/cW1y/1MvNP9MFxn/YmZy/08i
        Jf9GICX/N1ty/0gXGf9DKzX/OFZr/0oTFP9KERL/ShES/0oREv9KERL/ShES/0oREv9KERL/TBQWiXVO
        UAFXIyUAej0qAHs/LTV5OyfqeTom/3k6Jv95Oib/eTom/3k6Jv95Oib/dTYk/10iHv91oLb/W0lT/08c
        IP94q8L/VTA2/0IsN/8omMT/SBsh/z1CU/8qj7f/SRMX/0oQEf9KERL/ShES/0oREv9KERL/ShES/0oR
        Ev9KEhPqTRgYN0wVFgCTXmABejwplHk6Jv95Oib/eTom/3k6Jv95Oib/eTom/3Y3JP9bKyD/Q1I7/1as
        m/9He2L/QGJG/1iyof9DbFH/MWRL/yKflv8zWj3/LXBZ/yOakP85TDP/RxsX/0oQEf9KERL/ShES/0oR
        Ev9KERL/ShES/0oREv9LExSWaz1CAns9KyZ5OyfdeTom/3k6Jv95Oib/eTom/3k6Jv93Oif/XyQe/0NS
        O/86vX7/Y8iX/3HKn/9wy5//cMqe/23HnP9ZtIb/VrCB/1axg/9XsYL/Sq57/ySpZv85TDP/SRMX/0oT
        FP9KERL/ShES/0oREv9KERL/ShES/0sSE95PFhcoezwqaHk6Jvt5Oib/eTom/3k6Jv95Oib/eTkl/3t2
        dv93obf/V62b/2PIl//U29j/3d3d/9zd3f/d3d3/2NjY/7u8u/+2t7b/t7e3/7e3t/+wt7P/Sq57/yOb
        kP8qj7f/OFZr/0oQEf9KERL/ShES/0oREv9KERL/ShES+00VFmt6PCmreTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/fFNG/3liX/9NgGX/cMqf/93d3f/d3d3/3d3d/93d3f/Y2Nj/vLy8/7e3t/+3t7f/t7e3/7e3
        t/9XsIP/LXBZ/z1CU/9DKzX/ShES/0oREv9KERL/ShES/0oREv9KERL/TBQVrXo7KNd5Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv92PCv/Xikn/0BiRv9wyp//3N3d/93d3f/d3d3/3d3d/9jY2P+8vLz/t7e3/7e3
        t/+1t7j/sri5/1Wxg/8zWj3/Rxsh/0gXGf9KERL/ShES/0oREv9KERL/ShES/0oREv9RGBbXeTon8Hk6
        Jv95Oib/eTom/3k6Jv95Oib/eTkl/3x8fP98r8T/WrOi/3DKnv/c3d3/3d3d/93d3f/d3d3/2NjY/7y8
        vP+3t7f/ube2/4O8zv9Ew+v/L7SU/yOflv8omMP/N1ty/0oQEf9KERL/ShES/0oREv9KERL/VhsX/28x
        Iud5Oib1eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/e0g4/3VMRP9KclX/cMqf/9zd3f/d3d3/3d3d/93d
        3f/Y2Nj/vLy8/7e3t/+6t7b/cL/Y/xnH//8gtp3/M2RI/0QsN/9GICX/ShES/0oREv9KERL/SRES/1Yb
        F/9yNCP/ejom6Xk6JvV5Oib/eTom/3k6Jv95Oib/eTom/3k6Jv92RDb/Xzk7/0NsUv9wyp//3N3d/93d
        3f/d3d3/3d3d/9jY2P+8vLz/t7e3/7q3tv9wv9j/Gcf//yC2nf8zZEj/RCw3/0YgJf9KERL/ShES/0oR
        Ev9WHBf/czQj/3o6Jv95OibpeTon73k6Jv95Oib/eTom/3k6Jv95Oib/eTkl/319ff+Assb/W7Sj/3DJ
        nv/c3d3/3d3d/93d3f/d3d3/2NjY/7y8vP+3t7f/ube2/4O8zv9Ew+v/L7SU/yOflv8omMP/N1ty/0oQ
        Ef9KERL/Vx0Y/3M1JP96Oib/eTom/3k6Juh5OinWeTom/3k6Jv95Oib/eTom/3k6Jv95Oib/ej8t/244
        Lv9EZkj/cMqf/9zd3f/d3d3/3d3d/93d3f/Y2Nj/vLy8/7e3t/+3t7f/tbe4/7K4uf9VsYP/M1o9/0cb
        If9IFxn/ShES/1keGP90NST/eTom/3k6Jv95Oib/ejsn1ng7Kqh5Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv92TkP/Yk5V/0Z6Yv9xyp//3d3d/93d3f/d3d3/3d3d/9jY2P+8vLz/t7e3/7e3t/+3t7f/t7e3/1ew
        g/8tcFn/PUJT/0MrNP9ZHhj/dDYk/3o6Jv95Oib/eTom/3k6Jv97PCmreDsuaHk6J/t5Oib/eTom/3k6
        Jv95Oib/eTkl/314d/+Cq7z/XrOe/2PHl//U29j/3d3d/9zd3f/d3d3/2NjY/7u8u/+2t7b/t7e3/7e3
        t/+wt7P/Sq57/yOakP8qj7f/SGRy/3U2I/96Oib/eTom/3k6Jv95Oib/eTom+3w+K2t2PDQmeDoo3Xk6
        Jv95Oib/eTom/3k6Jv95Oib/eTwo/3s8Kv9gbEf/Or5+/2PHl/9xyp//cMqf/3DKnv9tx5z/WbSG/1aw
        gf9WsYP/V7CC/0que/8kqWX/OUwz/1oiHv90OCf/eTom/3k6Jv95Oib/eTom/3k6Jv95OyfdfD8tJ2NL
        tQF4OiuTeTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTkl/3VCK/9ga0f/XrOe/0Z6Yv9FZkj/W7Wj/0Js
        Uf83aU3/I6GX/zNaPf80dlz/JJuQ/zlMM/9ZKh//dTYk/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3o7
        KJSSXF4BdzotAHc7LzJ5OijoeTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTkl/3o8Kv+Bq7v/Yk9W/285
        Lv+Assb/Xzk7/2JHRP8snMX/Vyko/1xcYP8skLj/XCMe/3Y2JP95Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv95OyfqfEAuNns/LABwPUYARk7iAXg6K4N5Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTwo/314
        d/93T0T/ej8t/319ff93RDb/ckY4/1Fyff9zPCv/bE9G/1Jtdv91OSf/eTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTom/3s9KYiUdnQBgEs8AHI8PQB2OjAAdjoxFXg6Kb15Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTkl/3k6Jv95Oib/eTkl/3k6Jv95Oib/ejkl/3k6Jv95Oib/ejol/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95OyjAfEAuGHs+LQB9RjcAVFTcAHk4IQB5OicAdjswMHk6J9N5Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/ejwp2n1CLzV7PioAdTQgAMDAwAAAAAAAcT5TAGlCrQB4OygAeToqOHk6
        J9N5Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3o7KNh9QS5AbCgRAKV5cgCLUEMAAAAAAAAAAAAAAAAAdjs1AHI8
        QAB4OiMAdzosLng6KLt5Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95OyjAfD8sM3c4IwCOXU4Akl9QAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAdzs5AGw/vwB4OigAdjowFXg6KYF5OifmeTom/3k6Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3k6Jv95Oyfqez0piH1ALxh6PCgAm2ReAIZMPAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdTtCAHk5JQB3Oi4AAK3/AHc6LTF4OimQeToo23k6Jvp5Oib/eTom/3k6
        Jv95Oib/eTom/3k6Jv95Oib/eTom/3o7J/16PCnhejwqlnxALjaaeXQBfD8tAHY2IgCKTkAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU1PeAHQ7NABzOzoAdzorAE1I/wB3OzEleDorZHk6
        KKR5OijUeTon7nk6JvV5Oib1eTsn8Ho8KNl7PSqtgEQycYVMOyyidHECez4sAIJMPAB/RzcAq6urAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAH/AAAA/gAAAHwAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAcAAAAPgAAAH8AAAD/gAAB8=
</value>
  </data>
</root>